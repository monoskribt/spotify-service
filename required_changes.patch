Subject: [PATCH] required changes
---
Index: src/main/java/com/spotifyapi/props/CorsConfigurationProps.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/spotifyapi/props/CorsConfigurationProps.java b/src/main/java/com/spotifyapi/props/CorsConfigurationProps.java
--- a/src/main/java/com/spotifyapi/props/CorsConfigurationProps.java	(revision 00832e7fdd8bfa8acd302f4d70b1c00e62b4220e)
+++ b/src/main/java/com/spotifyapi/props/CorsConfigurationProps.java	(date 1738168484763)
@@ -2,20 +2,23 @@
 
 import lombok.Getter;
 import org.springframework.beans.factory.annotation.Value;
+import org.springframework.boot.context.properties.ConfigurationProperties;
+import org.springframework.boot.context.properties.bind.ConstructorBinding;
 import org.springframework.stereotype.Component;
 
 @Component
 @Getter
+//@ConfigurationProperties(prefix = "security") // todo use it
 public class CorsConfigurationProps {
 
     @Value("${cors.allowed-origins}")
     private String allowedOrigins;
 
     @Value("${cors.allowed-methods}")
-    private String allowedMethods;
+    private String allowedMethods; //todo: replace with List<String>
 
     @Value("${cors.allowed-headers}")
-    private String allowedHeaders;
+    private String allowedHeaders; //todo: replace with List<String>
 
     @Value("${cors.allow-credentials}")
     private boolean allowCredentials;
Index: src/main/java/com/spotifyapi/exception/UserNotFoundException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/spotifyapi/exception/UserNotFoundException.java b/src/main/java/com/spotifyapi/exception/UserNotFoundException.java
--- a/src/main/java/com/spotifyapi/exception/UserNotFoundException.java	(revision 00832e7fdd8bfa8acd302f4d70b1c00e62b4220e)
+++ b/src/main/java/com/spotifyapi/exception/UserNotFoundException.java	(date 1738167640780)
@@ -1,5 +1,10 @@
 package com.spotifyapi.exception;
 
+//import org.springframework.web.bind.annotation.ResponseStatus;
+//
+//import static org.springframework.http.HttpStatus.NOT_FOUND;
+//
+//@ResponseStatus(NOT_FOUND)
 public class UserNotFoundException extends RuntimeException {
 
     public UserNotFoundException(String message) {
Index: src/main/java/com/spotifyapi/aspect/LoggerAspect.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/spotifyapi/aspect/LoggerAspect.java b/src/main/java/com/spotifyapi/aspect/LoggerAspect.java
--- a/src/main/java/com/spotifyapi/aspect/LoggerAspect.java	(revision 00832e7fdd8bfa8acd302f4d70b1c00e62b4220e)
+++ b/src/main/java/com/spotifyapi/aspect/LoggerAspect.java	(date 1738166658017)
@@ -19,7 +19,7 @@
 @AllArgsConstructor
 @Slf4j
 public class LoggerAspect {
-
+// TODO - do you use it?
     private final LoggerRepository loggerRepository;
     private final UserService userService;
 
Index: src/main/java/com/spotifyapi/controller/UserController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/spotifyapi/controller/UserController.java b/src/main/java/com/spotifyapi/controller/UserController.java
--- a/src/main/java/com/spotifyapi/controller/UserController.java	(revision 00832e7fdd8bfa8acd302f4d70b1c00e62b4220e)
+++ b/src/main/java/com/spotifyapi/controller/UserController.java	(date 1738167640768)
@@ -20,7 +20,7 @@
 
     @GetMapping("/info")
     public Map<String, String> getInfoAboutUser() {
-        Map<String, String> map = new HashMap<>();
+        Map<String, String> map = new HashMap<>(); // todo use dto (optional)
         map.put("nickname", userService.getCurrentUsername());
         map.put("status", userService.getSubscribeStatusUsers());
         return map;
@@ -31,11 +31,11 @@
     public ResponseEntity<Map<String, String>> manageSubscribeStatus(@RequestParam SubscribeStatus subscribeStatus) {
         try {
             userService.manageSubscribeStatusOfUser(subscribeStatus);
-            Map<String, String> response = new HashMap<>();
+            Map<String, String> response = new HashMap<>(); // todo use dto (optional)
             response.put("message", "Subscription status updated successfully");
             return ResponseEntity.ok(response);
         } catch (UserNotFoundException e) {
-            Map<String, String> errorResponse = new HashMap<>();
+            Map<String, String> errorResponse = new HashMap<>(); // todo use @ControllerAdvice
             errorResponse.put("error", "User not found");
             return ResponseEntity.status(HttpStatus.NOT_FOUND).body(errorResponse);
         }
Index: src/main/java/com/spotifyapi/repository/TrackRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/spotifyapi/repository/TrackRepository.java b/src/main/java/com/spotifyapi/repository/TrackRepository.java
--- a/src/main/java/com/spotifyapi/repository/TrackRepository.java	(revision 00832e7fdd8bfa8acd302f4d70b1c00e62b4220e)
+++ b/src/main/java/com/spotifyapi/repository/TrackRepository.java	(date 1738168484770)
@@ -10,7 +10,7 @@
 @Repository
 public interface TrackRepository extends JpaRepository<SpotifyTrackFromPlaylist, String> {
 
-    boolean existsByIdAndUserPlaylistId(String trackId, String playlistId);
+    boolean existsByIdAndUserPlaylistId(String trackId, String playlistId); //todo delete
 
     List<SpotifyTrackFromPlaylist> findAllByUserPlaylistId(String playlistId);
 
Index: src/main/java/com/spotifyapi/service/impl/UserServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/spotifyapi/service/impl/UserServiceImpl.java b/src/main/java/com/spotifyapi/service/impl/UserServiceImpl.java
--- a/src/main/java/com/spotifyapi/service/impl/UserServiceImpl.java	(revision 00832e7fdd8bfa8acd302f4d70b1c00e62b4220e)
+++ b/src/main/java/com/spotifyapi/service/impl/UserServiceImpl.java	(date 1738169568966)
@@ -93,7 +93,7 @@
 
 
         } catch (IOException | SpotifyWebApiException | ParseException e) {
-            e.printStackTrace();
+            e.printStackTrace(); // todo ??
         }
     }
 
Index: src/main/java/com/spotifyapi/service/impl/RabbitMQServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/spotifyapi/service/impl/RabbitMQServiceImpl.java b/src/main/java/com/spotifyapi/service/impl/RabbitMQServiceImpl.java
--- a/src/main/java/com/spotifyapi/service/impl/RabbitMQServiceImpl.java	(revision 00832e7fdd8bfa8acd302f4d70b1c00e62b4220e)
+++ b/src/main/java/com/spotifyapi/service/impl/RabbitMQServiceImpl.java	(date 1738168484736)
@@ -28,24 +28,24 @@
     @Override
     public void sendMessageToTelegram(User user, Set<SpotifyRelease> releases) {
         var releaseInfo = releases.stream()
-                .map(album -> Map.of(
+                .map(album -> Map.of( // todo use dto (optional)
                         "albumId", album.getId(),
                         "albumName", album.getName()
                 ))
                 .toList();
 
         Map<String, Object> message = Map.of(
-                "email", user.getEmail(),
+                "email", user.getEmail(), // todo use dto (optional)
                 "release", releaseInfo
         );
 
-        try {
-            String jsonMessage = objectMapper.writeValueAsString(message);
+//        try {
+//            String jsonMessage = objectMapper.writeValueAsString(message);
             rabbitTemplate.convertAndSend(binding.getExchange(),
-                    binding.getRoutingKey(), jsonMessage);
-        } catch (JsonProcessingException e) {
-            e.printStackTrace();
-        }
+                    binding.getRoutingKey(), message);
+//        } catch (JsonProcessingException e) {
+//            e.printStackTrace(); // todo use logger
+//        }
     }
 }
 
Index: src/main/java/com/spotifyapi/service/impl/SpotifyAuthImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/spotifyapi/service/impl/SpotifyAuthImpl.java b/src/main/java/com/spotifyapi/service/impl/SpotifyAuthImpl.java
--- a/src/main/java/com/spotifyapi/service/impl/SpotifyAuthImpl.java	(revision 00832e7fdd8bfa8acd302f4d70b1c00e62b4220e)
+++ b/src/main/java/com/spotifyapi/service/impl/SpotifyAuthImpl.java	(date 1738167640752)
@@ -26,11 +26,11 @@
                 .scope(USER_LIBRARY_READ,
                         USER_LIBRARY_MODIFY,
                         USER_FOLLOW_READ,
-                        USER_FOLLOW_MODIFY,
-                        PLAYLIST_MODIFY_PRIVATE,
+                        USER_FOLLOW_MODIFY, // todo remove
+                        PLAYLIST_MODIFY_PRIVATE, // todo remove
                         PLAYLIST_MODIFY_PUBLIC,
                         USER_READ_EMAIL)
-                .show_dialog(true)
+                .show_dialog(true) // todo remove
                 .build()
                 .execute()
                 .toString();
@@ -50,8 +50,8 @@
             return new TokensDTO(accessToken, refreshToken);
 
         } catch (IOException | SpotifyWebApiException | ParseException e) {
-            e.printStackTrace();
-            throw new RuntimeException("Error retrieving tokens: " + e.getMessage());
+            e.printStackTrace(); // todo ??
+            throw new RuntimeException("Error retrieving tokens: " + e.getMessage()); // todo don't throw runtime exception
         }
     }
 
Index: src/main/java/com/spotifyapi/constant/ConstantTimeForCookie.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/spotifyapi/constant/ConstantTimeForCookie.java b/src/main/java/com/spotifyapi/constant/ConstantTimeForCookie.java
--- a/src/main/java/com/spotifyapi/constant/ConstantTimeForCookie.java	(revision 00832e7fdd8bfa8acd302f4d70b1c00e62b4220e)
+++ b/src/main/java/com/spotifyapi/constant/ConstantTimeForCookie.java	(date 1738167640771)
@@ -1,5 +1,6 @@
 package com.spotifyapi.constant;
 
+//todo - use or delete
 public class ConstantTimeForCookie {
 
     public static final int ONE_HOUR = 60 * 60;
Index: src/main/java/com/spotifyapi/service/SpotifyAuth.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/spotifyapi/service/SpotifyAuth.java b/src/main/java/com/spotifyapi/service/SpotifyAuth.java
--- a/src/main/java/com/spotifyapi/service/SpotifyAuth.java	(revision 00832e7fdd8bfa8acd302f4d70b1c00e62b4220e)
+++ b/src/main/java/com/spotifyapi/service/SpotifyAuth.java	(date 1738167640764)
@@ -9,5 +9,5 @@
 
     TokensDTO getAuthorizationTokens(String code);
 
-    TokensDTO getNewAccessToken(String refreshToken);
+    TokensDTO getNewAccessToken(String refreshToken); //todo - delete or use
 }
Index: src/main/java/com/spotifyapi/service/impl/SpotifyReleaseServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/spotifyapi/service/impl/SpotifyReleaseServiceImpl.java b/src/main/java/com/spotifyapi/service/impl/SpotifyReleaseServiceImpl.java
--- a/src/main/java/com/spotifyapi/service/impl/SpotifyReleaseServiceImpl.java	(revision 00832e7fdd8bfa8acd302f4d70b1c00e62b4220e)
+++ b/src/main/java/com/spotifyapi/service/impl/SpotifyReleaseServiceImpl.java	(date 1738168484809)
@@ -55,7 +55,7 @@
     }
 
     private Set<SpotifyRelease> checkReleasesForUser(User user) {
-        String authorizationHeader = "";
+        String authorizationHeader = "";//todo ???
         List<AlbumSimplified> albumList = spotifyService.getReleases(authorizationHeader);
 
         List<String> alreadyContainsReleasesId = getReleasesByUserId(user.getId())
Index: src/main/java/com/spotifyapi/service/impl/SpotifyServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/spotifyapi/service/impl/SpotifyServiceImpl.java b/src/main/java/com/spotifyapi/service/impl/SpotifyServiceImpl.java
--- a/src/main/java/com/spotifyapi/service/impl/SpotifyServiceImpl.java	(revision 00832e7fdd8bfa8acd302f4d70b1c00e62b4220e)
+++ b/src/main/java/com/spotifyapi/service/impl/SpotifyServiceImpl.java	(date 1738169715293)
@@ -3,6 +3,7 @@
 
 import com.google.gson.JsonArray;
 import com.google.gson.JsonObject;
+import com.neovisionaries.i18n.CountryCode;
 import com.spotifyapi.exception.PlaylistNotFoundException;
 import com.spotifyapi.mapper.TrackSimplifiedWrapper;
 import com.spotifyapi.model.SpotifyArtist;
@@ -94,9 +95,27 @@
 
         List<AlbumSimplified> listOfAlbums = new ArrayList<>();
 
+//        for (CountryCode value : CountryCode.values()) {
+//            AlbumSimplified[] items = spotifyApi.getListOfNewReleases()
+//                    .country(value)
+//                    .limit(50)
+//                    .build()
+//                    .execute()
+//                    .getItems();
+//
+//
+//            for (AlbumSimplified item : items) {
+//                log.info("Album name: {}", item.getName());
+//            }
+//        }
+
+
+        //todo: add loader on UI, execute operation in parallel or async
+        //todo: add optimization to process the list of artists in parallel
         for(SpotifyArtist artist : artists) {
             var album = Arrays.stream(spotifyApi
                             .getArtistsAlbums(artist.getId())
+                            .album_type()
                             .build()
                             .execute()
                             .getItems())
Index: src/main/java/com/spotifyapi/dto/CookieDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/spotifyapi/dto/CookieDTO.java b/src/main/java/com/spotifyapi/dto/CookieDTO.java
--- a/src/main/java/com/spotifyapi/dto/CookieDTO.java	(revision 00832e7fdd8bfa8acd302f4d70b1c00e62b4220e)
+++ b/src/main/java/com/spotifyapi/dto/CookieDTO.java	(date 1738167640757)
@@ -8,7 +8,7 @@
 @AllArgsConstructor
 @Getter
 @Setter
-public class CookieDTO {
+public class CookieDTO { //todo - delete
 
     private Cookie accessTokenCookie;
     private Cookie refreshTokenCookie;
Index: src/main/java/com/spotifyapi/mapper/AbstractTrack.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/spotifyapi/mapper/AbstractTrack.java b/src/main/java/com/spotifyapi/mapper/AbstractTrack.java
--- a/src/main/java/com/spotifyapi/mapper/AbstractTrack.java	(revision 00832e7fdd8bfa8acd302f4d70b1c00e62b4220e)
+++ b/src/main/java/com/spotifyapi/mapper/AbstractTrack.java	(date 1738167640777)
@@ -5,7 +5,7 @@
 
 import java.util.Map;
 
-@Component
+@Component //todo: remove
 public abstract class AbstractTrack {
 
     public abstract String getId();
Index: src/main/java/com/spotifyapi/repository/LoggerRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/spotifyapi/repository/LoggerRepository.java b/src/main/java/com/spotifyapi/repository/LoggerRepository.java
--- a/src/main/java/com/spotifyapi/repository/LoggerRepository.java	(revision 00832e7fdd8bfa8acd302f4d70b1c00e62b4220e)
+++ b/src/main/java/com/spotifyapi/repository/LoggerRepository.java	(date 1738168484803)
@@ -6,7 +6,4 @@
 
 @Repository
 public interface LoggerRepository extends JpaRepository<Logger, Long> {
-
-
-
 }
